/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Experience as PrismaExperience,
  Engineer as PrismaEngineer,
} from "@prisma/client";

export class ExperienceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExperienceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.experience.count(args);
  }

  async experiences(
    args: Prisma.ExperienceFindManyArgs
  ): Promise<PrismaExperience[]> {
    return this.prisma.experience.findMany(args);
  }
  async experience(
    args: Prisma.ExperienceFindUniqueArgs
  ): Promise<PrismaExperience | null> {
    return this.prisma.experience.findUnique(args);
  }
  async createExperience(
    args: Prisma.ExperienceCreateArgs
  ): Promise<PrismaExperience> {
    return this.prisma.experience.create(args);
  }
  async updateExperience(
    args: Prisma.ExperienceUpdateArgs
  ): Promise<PrismaExperience> {
    return this.prisma.experience.update(args);
  }
  async deleteExperience(
    args: Prisma.ExperienceDeleteArgs
  ): Promise<PrismaExperience> {
    return this.prisma.experience.delete(args);
  }

  async getEngineer(parentId: string): Promise<PrismaEngineer | null> {
    return this.prisma.experience
      .findUnique({
        where: { id: parentId },
      })
      .engineer();
  }
}
