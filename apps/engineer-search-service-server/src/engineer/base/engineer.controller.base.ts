/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EngineerService } from "../engineer.service";
import { EngineerCreateInput } from "./EngineerCreateInput";
import { Engineer } from "./Engineer";
import { EngineerFindManyArgs } from "./EngineerFindManyArgs";
import { EngineerWhereUniqueInput } from "./EngineerWhereUniqueInput";
import { EngineerUpdateInput } from "./EngineerUpdateInput";
import { EducationFindManyArgs } from "../../education/base/EducationFindManyArgs";
import { Education } from "../../education/base/Education";
import { EducationWhereUniqueInput } from "../../education/base/EducationWhereUniqueInput";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { ExperienceWhereUniqueInput } from "../../experience/base/ExperienceWhereUniqueInput";

export class EngineerControllerBase {
  constructor(protected readonly service: EngineerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Engineer })
  async createEngineer(
    @common.Body() data: EngineerCreateInput
  ): Promise<Engineer> {
    return await this.service.createEngineer({
      data: {
        ...data,

        budget: data.budget
          ? {
              connect: data.budget,
            }
          : undefined,
      },
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFullTime: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Engineer] })
  @ApiNestedQuery(EngineerFindManyArgs)
  async engineers(@common.Req() request: Request): Promise<Engineer[]> {
    const args = plainToClass(EngineerFindManyArgs, request.query);
    return this.service.engineers({
      ...args,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFullTime: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async engineer(
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Engineer | null> {
    const result = await this.service.engineer({
      where: params,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isFullTime: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEngineer(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() data: EngineerUpdateInput
  ): Promise<Engineer | null> {
    try {
      return await this.service.updateEngineer({
        where: params,
        data: {
          ...data,

          budget: data.budget
            ? {
                connect: data.budget,
              }
            : undefined,
        },
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isFullTime: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Engineer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEngineer(
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Engineer | null> {
    try {
      return await this.service.deleteEngineer({
        where: params,
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isFullTime: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/educations")
  @ApiNestedQuery(EducationFindManyArgs)
  async findEducations(
    @common.Req() request: Request,
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Education[]> {
    const query = plainToClass(EducationFindManyArgs, request.query);
    const results = await this.service.findEducations(params.id, {
      ...query,
      select: {
        createdAt: true,
        degree: true,
        endDate: true,

        engineer: {
          select: {
            id: true,
          },
        },

        id: true,
        institution: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/educations")
  async connectEducations(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        connect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/educations")
  async updateEducations(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        set: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/educations")
  async disconnectEducations(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        disconnect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/experiences")
  @ApiNestedQuery(ExperienceFindManyArgs)
  async findExperiences(
    @common.Req() request: Request,
    @common.Param() params: EngineerWhereUniqueInput
  ): Promise<Experience[]> {
    const query = plainToClass(ExperienceFindManyArgs, request.query);
    const results = await this.service.findExperiences(params.id, {
      ...query,
      select: {
        company: true,
        createdAt: true,
        endDate: true,

        engineer: {
          select: {
            id: true,
          },
        },

        id: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/experiences")
  async connectExperiences(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        connect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/experiences")
  async updateExperiences(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        set: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/experiences")
  async disconnectExperiences(
    @common.Param() params: EngineerWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        disconnect: body,
      },
    };
    await this.service.updateEngineer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
