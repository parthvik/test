/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Engineer } from "./Engineer";
import { EngineerCountArgs } from "./EngineerCountArgs";
import { EngineerFindManyArgs } from "./EngineerFindManyArgs";
import { EngineerFindUniqueArgs } from "./EngineerFindUniqueArgs";
import { CreateEngineerArgs } from "./CreateEngineerArgs";
import { UpdateEngineerArgs } from "./UpdateEngineerArgs";
import { DeleteEngineerArgs } from "./DeleteEngineerArgs";
import { EducationFindManyArgs } from "../../education/base/EducationFindManyArgs";
import { Education } from "../../education/base/Education";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { Budget } from "../../budget/base/Budget";
import { EngineerService } from "../engineer.service";
@graphql.Resolver(() => Engineer)
export class EngineerResolverBase {
  constructor(protected readonly service: EngineerService) {}

  async _engineersMeta(
    @graphql.Args() args: EngineerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Engineer])
  async engineers(
    @graphql.Args() args: EngineerFindManyArgs
  ): Promise<Engineer[]> {
    return this.service.engineers(args);
  }

  @graphql.Query(() => Engineer, { nullable: true })
  async engineer(
    @graphql.Args() args: EngineerFindUniqueArgs
  ): Promise<Engineer | null> {
    const result = await this.service.engineer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Engineer)
  async createEngineer(
    @graphql.Args() args: CreateEngineerArgs
  ): Promise<Engineer> {
    return await this.service.createEngineer({
      ...args,
      data: {
        ...args.data,

        budget: args.data.budget
          ? {
              connect: args.data.budget,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Engineer)
  async updateEngineer(
    @graphql.Args() args: UpdateEngineerArgs
  ): Promise<Engineer | null> {
    try {
      return await this.service.updateEngineer({
        ...args,
        data: {
          ...args.data,

          budget: args.data.budget
            ? {
                connect: args.data.budget,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Engineer)
  async deleteEngineer(
    @graphql.Args() args: DeleteEngineerArgs
  ): Promise<Engineer | null> {
    try {
      return await this.service.deleteEngineer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Education], { name: "educations" })
  async findEducations(
    @graphql.Parent() parent: Engineer,
    @graphql.Args() args: EducationFindManyArgs
  ): Promise<Education[]> {
    const results = await this.service.findEducations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Experience], { name: "experiences" })
  async findExperiences(
    @graphql.Parent() parent: Engineer,
    @graphql.Args() args: ExperienceFindManyArgs
  ): Promise<Experience[]> {
    const results = await this.service.findExperiences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Budget, {
    nullable: true,
    name: "budget",
  })
  async getBudget(@graphql.Parent() parent: Engineer): Promise<Budget | null> {
    const result = await this.service.getBudget(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
