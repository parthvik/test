/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmploymentStatusService } from "../employmentStatus.service";
import { EmploymentStatusCreateInput } from "./EmploymentStatusCreateInput";
import { EmploymentStatus } from "./EmploymentStatus";
import { EmploymentStatusFindManyArgs } from "./EmploymentStatusFindManyArgs";
import { EmploymentStatusWhereUniqueInput } from "./EmploymentStatusWhereUniqueInput";
import { EmploymentStatusUpdateInput } from "./EmploymentStatusUpdateInput";

export class EmploymentStatusControllerBase {
  constructor(protected readonly service: EmploymentStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmploymentStatus })
  async createEmploymentStatus(
    @common.Body() data: EmploymentStatusCreateInput
  ): Promise<EmploymentStatus> {
    return await this.service.createEmploymentStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmploymentStatus] })
  @ApiNestedQuery(EmploymentStatusFindManyArgs)
  async employmentStatuses(
    @common.Req() request: Request
  ): Promise<EmploymentStatus[]> {
    const args = plainToClass(EmploymentStatusFindManyArgs, request.query);
    return this.service.employmentStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmploymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employmentStatus(
    @common.Param() params: EmploymentStatusWhereUniqueInput
  ): Promise<EmploymentStatus | null> {
    const result = await this.service.employmentStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmploymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmploymentStatus(
    @common.Param() params: EmploymentStatusWhereUniqueInput,
    @common.Body() data: EmploymentStatusUpdateInput
  ): Promise<EmploymentStatus | null> {
    try {
      return await this.service.updateEmploymentStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmploymentStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmploymentStatus(
    @common.Param() params: EmploymentStatusWhereUniqueInput
  ): Promise<EmploymentStatus | null> {
    try {
      return await this.service.deleteEmploymentStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
