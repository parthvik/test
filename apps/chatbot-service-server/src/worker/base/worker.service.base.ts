/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Worker as PrismaWorker } from "@prisma/client";

export class WorkerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkerCountArgs, "select">): Promise<number> {
    return this.prisma.worker.count(args);
  }

  async workers(args: Prisma.WorkerFindManyArgs): Promise<PrismaWorker[]> {
    return this.prisma.worker.findMany(args);
  }
  async worker(
    args: Prisma.WorkerFindUniqueArgs
  ): Promise<PrismaWorker | null> {
    return this.prisma.worker.findUnique(args);
  }
  async createWorker(args: Prisma.WorkerCreateArgs): Promise<PrismaWorker> {
    return this.prisma.worker.create(args);
  }
  async updateWorker(args: Prisma.WorkerUpdateArgs): Promise<PrismaWorker> {
    return this.prisma.worker.update(args);
  }
  async deleteWorker(args: Prisma.WorkerDeleteArgs): Promise<PrismaWorker> {
    return this.prisma.worker.delete(args);
  }
}
